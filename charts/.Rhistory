adult_anemia_fem = melt(adult_anemia_fem,id.vars=c("Country.Name","Country.Code"))
names(adult_anemia_fem) = c("country","iso3","year","value")
adult_anemia_fem$year = substr(adult_anemia_fem$year,2,5)
adult_anemia_fem$indicator = "adult_anemia"
adult_anemia_fem$disaggregation = "pregnancy"
adult_anemia_fem$disagg.value = "All women"
adult_anemia_fem$component = "I"
master_dat_list[[master_dat_index]] = adult_anemia_fem
master_dat_index = master_dat_index + 1
dat = read.csv("ADULT STATUS - sodium_with_location_names.csv",na.strings="",as.is=T)
adult_sodium = dat[c("location_name","ihme_loc_id","year_id","mapvar")]
names(adult_sodium) = c("country","iso3","year","value")
adult_sodium$indicator = "adult_sodium"
adult_sodium$disaggregation = "all"
adult_sodium$disagg.value = ""
adult_sodium$component = "I"
master_dat_list[[master_dat_index]] = adult_sodium
master_dat_index = master_dat_index + 1
dat = read.csv("DIETARY_NEEDS_2016_national.csv",na.strings="",as.is=T)
indicators = c(
"Diet low in nuts and seeds (g/day)",
"Diet low in milk (g/day)",
"Diet low in calcium (g/day)",
"Diet low in fruits (g/day)",
"Diet low in whole grains (g/day)",
"Diet low in seafood omega-3 fatty acids (g/day)",
"Diet low in polyunsaturated fatty acids (% energy/day)",
"Diet low in vegetables (g/day)",
"Diet low in legumes (g/day)",
"Diet high in trans fatty acids (% energy/day)",
"Diet high in saturated fatty acids (% energy/day)",
"Diet high in red meat (g/day)",
"Diet high in processed meat (g/day)",
"Diet high in sodium (g/day)",
"Diet high in sugar-sweetened beverages (g/day)"
)
ind.names = c(
"Nuts and seeds",
"Milk",
"Calcium",
"Fruit",
"Whole grain",
"Omega 3",
"Polyunsaturated fat",
"Vegetables",
"Legumes",
"Trans fat",
"Saturated fat",
"Red meat",
"Processed meat",
"Sodium",
"Sugar-sweeted beverages"
)
ind.units = c(
"g",
"g",
"g",
"g",
"g",
"g",
"%",
"g",
"g",
"%",
"%",
"g",
"g",
"g",
"g"
)
recs = c(
20.5,
435,
1.25,
250,
125,
0.25,
11,
360,
60,
0.5,
7,
22.5,
2,
2,
2.5
)
unit.dat = data.frame(modelable_entity_name=indicators,indicator=ind.names,unit=ind.units,rec=recs)
diet_mapping = read.csv("dietary_mapping.csv",na.strings="")
dat = subset(dat,age_group_id==27)
dat = subset(dat,sex_id==3)
dietary_needs = dat[c("location_name","year_id","mean","modelable_entity_name")]
dietary_needs = merge(dietary_needs,unit.dat,by="modelable_entity_name")
dietary_needs$modelable_entity_name = NULL
names(dietary_needs) = c("country","year","value","indicator","unit","rec")
dietary_needs$disaggregation = "location"
dietary_needs$disagg.value = "National"
dietary_needs$component = "M"
dietary_needs = merge(dietary_needs,diet_mapping,by="country")
master_dat_list[[master_dat_index]] = dietary_needs
master_dat_index = master_dat_index + 1
dat = read.csv("DIETARY_NEEDS_2016_regional.csv",na.strings="",as.is=T)
#TODO: Check this is the filter we want
dat = subset(dat,age_group_name=="age-standardized 25+")
dat = subset(dat,sex_id==3)
dat.global = data.table(dat)[,.(value=weighted.mean(mean,population)),by=.(year_id,modelable_entity_name)]
dietary_needs_reg = dat[c("region_name","year_id","mean","modelable_entity_name")]
dietary_needs_reg = merge(dietary_needs_reg,unit.dat,by="modelable_entity_name")
dietary_needs_reg$modelable_entity_name = NULL
names(dietary_needs_reg) = c("region","year","value","indicator","unit","rec")
dietary_needs_reg$disaggregation = "location"
dietary_needs_reg$disagg.value = "Regional"
dietary_needs_reg$component = "M"
dietary_needs_reg = join(diet_mapping,dietary_needs_reg,by="region")
master_dat_list[[master_dat_index]] = dietary_needs_reg
master_dat_index = master_dat_index + 1
dietary_needs_global = merge(dat.global,unit.dat,by="modelable_entity_name")
dietary_needs_global$modelable_entity_name = NULL
names(dietary_needs_global) = c("year","value","indicator","unit","rec")
dietary_needs_global$global = "global"
dietary_needs_global$disaggregation = "location"
dietary_needs_global$disagg.value = "Global"
dietary_needs_global$component = "M"
diet_mapping$global = "global"
dietary_needs_global = join(diet_mapping,dietary_needs_global,by="global")
dietary_needs_global$global = NULL
master_dat_list[[master_dat_index]] = dietary_needs_global
master_dat_index = master_dat_index + 1
dat = read.xls("ADULT STATUS - Anaemia pregnant.xls",sheet=1,na.strings="",skip=2)
adult_anemia_preg = dat[c("Country.Name","Country.Code",paste0("X",1960:2017))]
adult_anemia_preg = melt(adult_anemia_preg,id.vars=c("Country.Name","Country.Code"))
names(adult_anemia_preg) = c("country","iso3","year","value")
adult_anemia_preg$year = substr(adult_anemia_preg$year,2,5)
adult_anemia_preg$indicator = "adult_anemia"
adult_anemia_preg$disaggregation = "pregnancy"
adult_anemia_preg$disagg.value = "Pregnant women"
adult_anemia_preg$component = "I"
master_dat_list[[master_dat_index]] = adult_anemia_preg
master_dat_index = master_dat_index + 1
dat = read.xls("ADULT STATUS - Anamia non-pregnant.xls",sheet=1,na.strings="",skip=2)
adult_anemia_nonpreg = dat[c("Country.Name","Country.Code",paste0("X",1960:2017))]
adult_anemia_nonpreg = melt(adult_anemia_nonpreg,id.vars=c("Country.Name","Country.Code"))
names(adult_anemia_nonpreg) = c("country","iso3","year","value")
adult_anemia_nonpreg$year = substr(adult_anemia_nonpreg$year,2,5)
adult_anemia_nonpreg$indicator = "adult_anemia"
adult_anemia_nonpreg$disaggregation = "pregnancy"
adult_anemia_nonpreg$disagg.value = "Non-pregnant women"
adult_anemia_nonpreg$component = "I"
master_dat_list[[master_dat_index]] = adult_anemia_nonpreg
master_dat_index = master_dat_index + 1
master_dat = rbindlist(master_dat_list,fill=T)
write.csv(master_dat,"../data.csv",na="",row.names=F)
anemia = subset(master_dat,indicator=="adult_anemia")
View(anemia)
unique(anemia$disagg.value)
unique(anemia$disaggregation)
countrydat
countrydat = subset(master_dat,country=="Kenya")
####Setup#####
list.of.packages <- c("ggplot2","reshape2","data.table","scales","varhandle","Cairo","plyr","eulerr","extrafont")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
wd <- "~/git/gnr-country-profile-2018"
setwd(wd)
font_import("fonts",prompt=F)
CairoFonts(
regular="Averta Regular",
bold="Averta Bold"
)
set.seed(12345)
dat <- read.csv("data.csv",na.strings=c("","."," "),as.is=TRUE)
countries <- unique(dat$country)
wd <- "~/git/gnr-country-profile-2018/charts"
setwd(wd)
# unlink(
#   dir(wd, full.names = TRUE)
#   , recursive = TRUE
# )
blank <- data.frame(x=0,y=0,text="No data")
no.data <- ggplot(blank,aes(x,y,label=text)) +
geom_text(size=20,color="grey",family="Averta Regular") +
theme(
axis.line = element_blank()
,axis.text = element_blank()
,axis.ticks = element_blank()
,axis.title = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
)
blank2 <- data.frame(x=0,y=0,text=" ")
cblank <- ggplot(blank2,aes(x,y,label=text)) +
geom_text(size=20) +
theme(
axis.line = element_blank()
,axis.text = element_blank()
,axis.ticks = element_blank()
,axis.title = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
,panel.background = element_blank()
,plot.background = element_blank()
)
simple_style = theme_bw() +
theme(
panel.border = element_blank()
,panel.grid.major = element_blank()
,panel.background = element_blank()
,plot.background = element_blank()
,panel.grid.minor = element_blank()
,axis.line = element_line(colour = "black")
,text = element_text(family="Averta Regular")
)
yellow <- "#FCC97A" #light orange
orange <- "#F39000" #orange
red <- "#DE5D09" #dark orange
blue <- "#475C6D" #dark grey
light.blue <- "#93CAC9" #aqua
lighter.blue <- "#B2D8D7" #aqua light
dark.grey <- "#A0ADBB" #grey
grey <- "#CFD9E5" #light grey
white <- "#ffffff"
# dark_orange = "#DE5D09"
# orange = "#F39000"
# light_orange = "#FCC97A"
# dark_aqua = "#007495"
# aqua = "#93CAC9"
# aqua_light = "#B2D8D7"
# aqua_extra_light = "#D1E7E5"
# dark_grey = "#475C6D"
# grey = "#A0ADBB"
# light_grey = "#CFD9E5"
quintileFillValues <- c(red, orange, yellow, lighter.blue, light.blue)
yellowOrangeFill <- scale_fill_manual(values=c(yellow,orange))
orangeYellowFill <- scale_fill_manual(values=c(orange,yellow))
yellowOrangeRedFill <- scale_fill_manual(values=c(yellow,orange,red))
orangeLightBlueFill <- scale_fill_manual(values=c(orange,light.blue))
orangeFill <- scale_fill_manual(values=c(orange))
yellowFill <- scale_fill_manual(values=c(yellow))
blueFill <- scale_fill_manual(values=c(blue))
lightBlueLighterBlueFill  <- scale_fill_manual(values=c(light.blue, lighter.blue))
lightBlueFill <- scale_fill_manual(values=c(light.blue))
lighterBlueFill <- scale_fill_manual(values=c(lighter.blue))
quintileFill <-  scale_fill_manual(values=quintileFillValues)
yellowOrangeColor <- scale_color_manual(values=c(yellow,orange))
orangeYellowColor <- scale_color_manual(values=c(orange,yellow))
yellowOrangeRedColor <- scale_color_manual(values=c(yellow,orange,red))
orangeLightBlueColor <- scale_color_manual(values=c(orange,light.blue))
orangeColor <- scale_color_manual(values=c(orange))
blueColor <- scale_color_manual(values=c(blue))
quintileColor <-  scale_color_manual(values=quintileFillValues)
textQuintileOffset <- scale_color_manual(values=c(white,white,blue,blue,blue))
firstAndLast <- function(vec,year_vec){
label_df = data.frame(vec,year_vec)
min.year = min(year_vec,na.rm=T)
max.year = max(year_vec,na.rm=T)
label_df$include = NA
label_df$include[label_df$year_vec==min.year] = 1
label_df$include[label_df$year_vec==max.year] = 1
if(is.factor(label_df$vec)){label_df$vec = unfactor(label_df$vec)}
label_df$vec[which(is.na(label_df$include))] = ""
return(label_df$vec)
}
safeFormat <- function(vec, prefix="", suffix=""){
results <- c()
for(x in vec){
#Missing
if(is.na(x)){
result <- ""
#Large Negative
}else if(x<= -1000){
result <- format(round(x, digits = 0),format="d",big.mark=",")
#Middle Negative
}else if(x< -1){
result <- round(x,digits=0)
#Small negative
}else if(x<0){
result <- round(x,digits=1)
#Zero
}else if(x==0){
result <- "0"
#Small positive
}else if(x<1){
result <- round(x,digits=1)
#Middle positive
}else if(x<1000){
result <- round(x,digits=0)
#Large positive
}else{
result <- format(round(x, digits = 0),format="d",big.mark=",")
}
if(result!=""){
result = paste0(prefix,result,suffix)
}
results <- c(results,result)
}
return(results)
}
####End setup####
####Loop####
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quantileColor,fill=quantileFill)
grouped_line = function(countrydat, ind, disagg, disagg.values, fill=orangeYellowFill, color=orangeYellowColor, percent=F, legend=F){
cdata = subset(countrydat, (indicator==ind & disaggregation==disagg))
cdata$value = as.numeric(cdata$value)
if(percent){
cdata$value = cdata$value*100
}
cdata = subset(cdata, !is.na(value))
cdata <- cdata[order(cdata$year),]
cdata$year = as.factor(cdata$year)
cdata$disagg.value = factor(cdata$disagg.value,levels=disagg.values)
c.max <- max(cdata$value,na.rm=TRUE)
c.key.data = data.frame(year=as.numeric(rep(NA,length(disagg.values))),disagg.value=disagg.values,value=as.numeric(rep(NA,length(disagg.values))))
c.key.data$disagg.value = factor(c.key.data$disagg.value,levels=disagg.values)
c = ggplot(cdata,aes(year,value,group=disagg.value,color=disagg.value)) +
geom_line(show.legend=F,size=1) +
geom_point(data=c.key.data,aes(group=disagg.value,fill=disagg.value),size=12,color=blue,stroke=1.5,shape=21,show.legend=legend) +
fill +
color +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=F) +
simple_style  +
scale_y_continuous(expand = c(0,0),limits=c(0,max(c.max*1.1,1))) +
# expand_limits(y=c1a.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=35,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
) + geom_text(size=9,aes(group=disagg.value,label=firstAndLast(safeFormat(value),unfactor(year))),position=position_dodge(0.5),vjust=-0.3,show.legend=F,family="Averta Regular")
return(c)
}
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quantileColor,fill=quantileFill)
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quintileColor,fill=quintileFill)
c26
Cairo(family="Averta Regular",file="c26.png",width=800,height=700,units="px",bg="white")
tryCatch({print(c26)},error=function(e){message(e);print(no.data)})
dev.off()
c26
getwd()
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quintileColor,fill=quintileFill,legend=T)
c26
c24 = grouped_line(countrydat, "adult_obesity","gender",c("Male","Female"),percent=T,color=orangeLightBlueColor,fill=orangeLightBlueFill)
c24
countrydat = subset(countrydat,year>2000)
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quintileColor,fill=quintileFill,legend=T)
c26
Cairo(family="Averta Regular",file="c26.png",width=800,height=700,units="px",bg="white")
tryCatch({print(c26)},error=function(e){message(e);print(no.data)})
dev.off()
grouped_line = function(countrydat, ind, disagg, disagg.values, fill=orangeYellowFill, color=orangeYellowColor, percent=F, legend=F, factor.years=T){
cdata = subset(countrydat, (indicator==ind & disaggregation==disagg))
cdata$value = as.numeric(cdata$value)
if(percent){
cdata$value = cdata$value*100
}
cdata = subset(cdata, !is.na(value))
cdata <- cdata[order(cdata$year),]
if(factor.years){
cdata$year = as.factor(cdata$year)
}
cdata$disagg.value = factor(cdata$disagg.value,levels=disagg.values)
c.max <- max(cdata$value,na.rm=TRUE)
c.key.data = data.frame(year=as.numeric(rep(NA,length(disagg.values))),disagg.value=disagg.values,value=as.numeric(rep(NA,length(disagg.values))))
c.key.data$disagg.value = factor(c.key.data$disagg.value,levels=disagg.values)
c = ggplot(cdata,aes(year,value,group=disagg.value,color=disagg.value)) +
geom_line(show.legend=F,size=1) +
geom_point(data=c.key.data,aes(group=disagg.value,fill=disagg.value),size=12,color=blue,stroke=1.5,shape=21,show.legend=legend) +
fill +
color +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=F) +
simple_style  +
scale_y_continuous(expand = c(0,0),limits=c(0,max(c.max*1.1,1))) +
# expand_limits(y=c1a.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=35,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
) + geom_text(size=9,aes(group=disagg.value,label=firstAndLast(safeFormat(value),unfactor(year))),position=position_dodge(0.5),vjust=-0.3,show.legend=F,family="Averta Regular")
return(c)
}
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quintileColor,fill=quintileFill,legend=T,factor.years=F)
c26
grouped_line = function(countrydat, ind, disagg, disagg.values, fill=orangeYellowFill, color=orangeYellowColor, percent=F, legend=F, factor.years=T){
cdata = subset(countrydat, (indicator==ind & disaggregation==disagg))
cdata$value = as.numeric(cdata$value)
if(percent){
cdata$value = cdata$value*100
}
cdata = subset(cdata, !is.na(value))
cdata <- cdata[order(cdata$year),]
if(factor.years){
cdata$year = as.factor(cdata$year)
}
cdata$disagg.value = factor(cdata$disagg.value,levels=disagg.values)
c.max <- max(cdata$value,na.rm=TRUE)
c.key.data = data.frame(year=as.numeric(rep(NA,length(disagg.values))),disagg.value=disagg.values,value=as.numeric(rep(NA,length(disagg.values))))
c.key.data$disagg.value = factor(c.key.data$disagg.value,levels=disagg.values)
c = ggplot(cdata,aes(year,value,group=disagg.value,color=disagg.value)) +
geom_line(show.legend=F,size=1) +
geom_point(data=c.key.data,aes(group=disagg.value,fill=disagg.value),size=12,color=blue,stroke=1.5,shape=21,show.legend=legend) +
fill +
color +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=F) +
simple_style  +
scale_y_continuous(expand = c(0,0),limits=c(0,max(c.max*1.1,1))) +
# expand_limits(y=c1a.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=35,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
)
if(factor.years){
c = c + geom_text(size=9,aes(group=disagg.value,label=firstAndLast(safeFormat(value),unfactor(year))),position=position_dodge(0.5),vjust=-0.3,show.legend=F,family="Averta Regular")
}else{
c = c + geom_text(size=9,aes(group=disagg.value,label=firstAndLast(safeFormat(value),year)),position=position_dodge(0.5),vjust=-0.3,show.legend=F,family="Averta Regular")
}
return(c)
}
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quintileColor,fill=quintileFill,legend=T,factor.years=F)
c26
is.factor(c26$year)
typeof
typeof(c26$year)
is.factor(countrydat$year)
typeof(countrydat$year)
grouped_line = function(countrydat, ind, disagg, disagg.values, fill=orangeYellowFill, color=orangeYellowColor, percent=F, legend=F, factor.years=T){
cdata = subset(countrydat, (indicator==ind & disaggregation==disagg))
cdata$value = as.numeric(cdata$value)
if(percent){
cdata$value = cdata$value*100
}
cdata = subset(cdata, !is.na(value))
cdata <- cdata[order(cdata$year),]
if(factor.years){
cdata$year = as.factor(cdata$year)
}else{
cdata$year = as.numeric(cdata$year)
}
cdata$disagg.value = factor(cdata$disagg.value,levels=disagg.values)
c.max <- max(cdata$value,na.rm=TRUE)
c.key.data = data.frame(year=as.numeric(rep(NA,length(disagg.values))),disagg.value=disagg.values,value=as.numeric(rep(NA,length(disagg.values))))
c.key.data$disagg.value = factor(c.key.data$disagg.value,levels=disagg.values)
c = ggplot(cdata,aes(year,value,group=disagg.value,color=disagg.value)) +
geom_line(show.legend=F,size=1) +
geom_point(data=c.key.data,aes(group=disagg.value,fill=disagg.value),size=12,color=blue,stroke=1.5,shape=21,show.legend=legend) +
fill +
color +
guides(fill=guide_legend(title=element_blank(),byrow=TRUE),color=F) +
simple_style  +
scale_y_continuous(expand = c(0,0),limits=c(0,max(c.max*1.1,1))) +
# expand_limits(y=c1a.max*1.1) +
theme(
legend.position="top"
,legend.text = element_text(size=35,color=blue,family="Averta Regular")
,legend.justification=c(0,0)
,legend.direction="vertical"
,axis.title.x=element_blank()
,axis.title.y=element_blank()
,axis.ticks=element_blank()
,axis.line.y = element_blank()
,axis.line.x = element_line(color=blue, size = 1.1)
,axis.text.y = element_text(size=25,color=dark.grey,family="Averta Regular")
,axis.text.x = element_text(size=25,color=blue,margin=margin(t=20,r=0,b=0,l=0),family="Averta Regular")
,panel.grid.major.y = element_line(color=dark.grey)
,legend.background = element_rect(fill = "transparent", colour = "transparent")
,legend.key = element_blank()
)
if(factor.years){
c = c + geom_text(size=9,aes(group=disagg.value,label=firstAndLast(safeFormat(value),unfactor(year))),position=position_dodge(0.5),vjust=-0.3,show.legend=F,family="Averta Regular")
}else{
c = c + geom_text(size=9,aes(group=disagg.value,label=firstAndLast(safeFormat(value),year)),position=position_dodge(0.5),vjust=-0.3,show.legend=F,family="Averta Regular")
}
return(c)
}
c26 = grouped_line(countrydat, "adult_anemia","pregnancy",c("All women","Pregnant women","Non-pregnant women"),percent=T,color=quintileColor,fill=quintileFill,legend=T,factor.years=F)
c26
Cairo(family="Averta Regular",file="c26.png",width=800,height=700,units="px",bg="white")
tryCatch({print(c26)},error=function(e){message(e);print(no.data)})
dev.off()
